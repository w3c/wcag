<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE div2
  SYSTEM "../xmlspec.dtd">
<div2 role="extsrc" id="keyboard-operation-keyboard-operable">
   <head>2.1.1</head>
   <div3 role="intent">
      <head>Intent of this Success Criterion</head>
      <p>The intent of this Success Criterion is to ensure that, wherever possible, content can be operated through a keyboard or keyboard interface (so an alternate keyboard can be used). When content can be operated through a keyboard or alternate keyboard, it is operable by people with no vision (who cannot use devices such as mice that require eye-hand coordination) as well as by people who must use alternate keyboards or input devices that act as keyboard emulators. Keyboard emulators include speech input software, sip-and-puff software, on-screen keyboards, scanning software and a variety of assistive technologies and alternate keyboards. Individuals with low vision also may have trouble tracking a pointer and find the use of software much easier (or only possible) if they can control it from the keyboard.</p>
      <p>Examples of "specific timings for individual keystrokes" include situations where a user would be required to repeat or execute multiple keystrokes within a short period of time or where a key must be held down for an extended period before the keystroke is registered. 
          </p>
      <p>The phrase "except where the underlying function requires input that depends on the path of the user's movement and not just the endpoints" is included to separate those things that cannot reasonably be controlled from a keyboard.</p>
      <p>Most actions carried out by a pointing device can also be done from the keyboard (for example, clicking, selecting, moving, sizing). However, there is a small class of input that is done with a pointing device that cannot be done from the keyboard in any known fashion without requiring an inordinate number of keystrokes. Free hand drawing, watercolor painting, and flying a helicopter through an obstacle course are all examples of functions that require path dependent input. Drawing straight lines, regular geometric shapes, re-sizing windows and dragging objects to a location (when the path to that location is not relevant) do not require path dependent input.
          </p>
      <p>The use of MouseKeys would not satisfy this Success Criterion because it is not a keyboard equivalent to the application; it is a mouse equivalent (i.e., it looks like a mouse to the application).</p>
      <p>It is assumed that the design of user input features takes into account that operating system keyboard accessibility features may be in use. For example, modifier key locking may be turned on. Content continues to function in such an environment, not sending events that would collide with the modifier key lock to produce unexpected results.
          </p>
      <div4 role="benefits">
         <head>Benefits: How Success Criterion 2.1.1 helps people with disabilities</head>
         <ulist>
            <item>
               <p>People who are blind (who cannot use devices such as mice that require eye-hand coordination)</p>
            </item>
            <item>
               <p>People with low vision (who may have trouble finding or tracking a pointer indicator on screen)</p>
            </item>
            <item>
               <p>
                  Some people with hand tremors find using a mouse very difficult and therefore usually use a keyboard
                  
                </p>
            </item>
         </ulist>
      </div4>
   </div3>
   <div3 role="examples">
      <head>2.1.1 examples</head>
      <ulist>
         <item>
            <p>
								       <emph role="bold">Example 1: A drawing Program.</emph>
							     </p>
            <p>A drawing program allows users to create, size, position and rotate objects from the keyboard.</p>
         </item>
         <item>
            <p>
								       <emph role="bold">Example 2: A drag and Drop Feature.</emph>
							     </p>
            <p>An application that uses drag and drop also supports "cut" and "paste" or form controls to move objects.</p>
         </item>
         <item>
            <p>
								       <emph role="bold">Example 3: Moving between and connecting discrete points.</emph>
							     </p>
            <p>A connect-the-dots program allows the user to move between dots on a screen and use the spacebar to connect the current dot to the previous one.</p>
         </item>
         <item>
            <p>
								       <emph role="bold">Example 4: Exception - Painting Program.</emph>
							     </p>
            <p>A watercolor painting program passes as an exception because the brush strokes vary depending on the speed and duration of the movements.</p>
         </item>
         <item>
            <p>
								       <emph role="bold">Example 5: Exception - Model helicopter flight training simulator.</emph>
							     </p>
            <p>A model helicopter flight training simulator passes as an exception because the nature of the simulator is to teach real-time behavior of a model helicopter.</p>
         </item>
         <item>
            <p>
								       <emph role="bold">Example 6: A PDA with an optional keyboard</emph>
							     </p>
            <p>A PDA device that is usually operated via a stylus has an optional keyboard that can be attached.  The keyboard allows full Web browsing in standard fashion.  The Web content is operable because it was designed to work with keyboard-only access.</p>
         </item>
      </ulist>
   </div3>
   <div3 role="resources">
      <head/>
   </div3>
   <div3 role="techniques" id="keyboard-operation-keyboard-operable_techniques">
      <head>Techniques for Addressing Success Criterion 2.1.1</head>
      <div4 role="sufficient">
         <head/>
         <olist>
            <item>
               <p>
									         <loc href="G202"
                       linktype="general">Ensuring keyboard control for all functionality</loc>
								       </p>
            </item>
            <item role="html">
               <p>Ensuring keyboard control by using one of the following techniques.</p>
               <ulist>
                  <item>
                     <p>
											             <loc href="H91" linktype="html">Using HTML form controls and links</loc>
										           </p>
                  </item>
                  <item>
                     <p>
                        <loc href="PDF3" linktype="pdf"/>
                     </p>
                  </item>
                  <item>
                     <p>
                        <loc href="PDF11" linktype="pdf"/>
                     </p>
                  </item>
                  <item>
                     <p>
                        <loc href="PDF23" linktype="pdf"/>
                     </p>
                  </item>
                  <item>
                     <p>
                        <loc href="SL15"
                             linktype="silverlight"/>
                     </p>
                  </item>
               </ulist>
            </item>
            <item role="script">
               <p> 
                  <loc href="G90"
                       linktype="general">Providing keyboard-controllable event handlers</loc> using one of the following techniques:     </p>
               <ulist>
                  <item>
                     <p>
											             <loc href="SCR20"
                             linktype="script">Using both keyboard and other device-specific functions</loc>
										           </p>
                  </item>
                  <item>
                     <p>
											             <loc href="SCR35"
                             linktype="script">Making JavaScript actions keyboard accessible (future link)</loc>
										           </p>
                  </item>
                  <item>
                     <p>
											             <loc href="SCR2"
                             linktype="script">Using redundant keyboard and mouse event handlers</loc>
										           </p>
                  </item>
                  <item>
                     <p>
                        <loc href="SL9"
                             linktype="silverlight"/>
                     </p>
                  </item>
                  <item>
                     <p>
                        <loc href="SL14"
                             linktype="silverlight"/>
                     </p>
                  </item>
               </ulist>
            </item>
            <item role="flash">
               <p>
                  <loc href="FLASH17"
                       linktype="flash">Preventing a keyboard trap in Flash content</loc> 
                  <emph role="bold">AND</emph> using the following techniques as applicable:</p>
               <ulist>
                  <item>
                     <p>
											             <loc href="FLASH22"
                             linktype="flash">Adding keyboard-accessible actions to static elements</loc>
										           </p>
                  </item>
                  <item>
                     <p>
											             <loc href="FLASH16"
                             linktype="flash">Making actions keyboard accessible by using the click event on standard components</loc>
										           </p>
                  </item>
                  <item>
                     <p>
											             <loc href="FLASH14"
                             linktype="flash">Using redundant keyboard and mouse event handlers in Flash</loc>
										           </p>
                  </item>
               </ulist>
            </item>
         </olist>
      </div4>
      <div4 role="tech-optional">
         <head>Additional Techniques (Advisory) for 2.1.1</head>
         <ulist>
            <item>
               <p>Using XHTML role, state, and value attributes if repurposing static elements as interactive user interface components (future link) AND <loc href="SCR29"
                       linktype="script">Adding keyboard-accessible actions to static HTML elements</loc>
               </p>
            </item>
            <item>
               <p>Providing keyboard shortcuts to important links and form controls (future link)</p>
            </item>
            <item>
               <p>Using unique letter combinations to begin each item of a list (future link)</p>
            </item>
            <item role="script">
               <p>Choosing the most abstract event handler (future link) (Scripting)</p>
            </item>
            <item role="script">
               <p>Using the onactivate event (future link) (Scripting)</p>
            </item>
            <item>
               <p>Avoiding use of common user agent keyboard commands for other purposes (future link) </p>
            </item>
         </ulist>
      </div4>
      <div4 role="failures">
         <head/>
         <ulist>
            <item role="script">
               <p>
									         <loc href="F54"
                       linktype="failure">Failure due to using only pointing-device-specific event handlers (including gesture) for a function</loc>
								       </p>
            </item>
            <item role="script">
               <p>
									         <loc href="F55"
                       linktype="failure">Failure due to using script to remove focus when focus is received</loc>
								       </p>
            </item>
            <item>
               <p>
									         <loc href="F42"
                       linktype="failure">Failure of Success Criterion 1.3.1 and 2.1.1 due to using scripting events to emulate links</loc>
								       </p>
            </item>
         </ulist>
      </div4>
   </div3>
</div2>
