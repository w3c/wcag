<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec
  SYSTEM "../xmlspec.dtd">
<spec xmlns:xi="http://www.w3.org/2001/XInclude" status="final" w3c-doctype="wgnote">
   <header>
      <title>Silverlight Techniques</title>
      <w3c-designation>WCAG20-SILVERLIGHT-TECHS</w3c-designation>
      <w3c-doctype>W3C Working Group Note</w3c-doctype>
      <pubdate>
         <day>3</day>
         <month>January</month>
         <year>2012</year>
      </pubdate>
      <publoc>
         <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS-20060331/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS-20060331/</loc>
      </publoc>
      <latestloc>
         <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS/</loc>
      </latestloc>
      <prevlocs>
         <loc href="http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS-20100107/">http://www.w3.org/WAI/GL/WCAG20/WD-WCAG20-Silverlight-TECHS-20100107/</loc>
      </prevlocs>
      <authlist>
         <author>
            <name>Wolf Schmidt, Microsoft</name>
         </author>
         <author>
            <name>Michael Cooper, W3C</name>
         </author>
      </authlist>
      <status>
         <p>
            <emph>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current W3C publications and the latest revision of this technical report can be found in the <loc href="http://www.w3.org/TR/">W3C technical reports index</loc> at http://www.w3.org/TR/.</emph>
         </p>
         <p>This version of CSS techniques has not significantly changed since the 19 November 2004 Working Draft. The <loc href="/WAI/GL/">Web Content  Accessibility Guidelines Working Group</loc> (WCAG WG) has focused on addressing issues related to Guidelines and Success Criteria. This publication  demonstrates how the different documents may link to each other. As the focus of the WCAG WG returns to techniques and test suites, the structure and presentation of the techniques documents will likely change to  reflect the relationships between Guidelines, Techniques, and testing documents. In future revisions, we expect to distinguish between techniques required for conformance versus those that are optional. Please refer to "<loc href="http://trace.wisc.edu/bugzilla_wcag/condensedreports/css_issues.php">Issue tracking for WCAG 2.0 Techniques for CSS</loc>" for a list of open issues related to this Working Draft. The "<loc href="/WAI/GL/WCAG20/css-tech-change-history.html">History of Changes to CSS Techniques for WCAG 2.0 Working Drafts</loc>" is also available.
			</p>
         <p>Please send comments about this document to <loc href="mailto:public-comments-wcag20@w3.org">public-comments-wcag20@w3.org</loc>. The <loc href="http://lists.w3.org/Archives/Public/public-comments-wcag20/">archives for the public comments list</loc> are publicly available.   <loc href="http://lists.w3.org/Archives/Public/w3c-wai-gl">Archives of the WCAG WG mailing list</loc> are also publicly available.</p>
         <p>Publication as a Working Draft does not imply endorsement by the W3C Membership. This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.  The WCAG WG intends to publish this as a Working Group Note at the time that WCAG 2.0 becomes a Recommendation.</p>
         <!-- do not need patent section since these are not on the Rec track -->
         <p>This document has been produced as part of the W3C <loc href="http://www.w3.org/WAI/">Web Accessibility Initiative</loc> (WAI). The goals of the WCAG WG are discussed in the <loc href="http://www.w3.org/WAI/GL/new-charter-2000.html">Working Group charter</loc>. The WCAG WG is part of the <loc href="http://www.w3.org/WAI/Technical/Activity">WAI Technical Activity</loc>.</p>
      </status>
      <abstract>
         <p>This document provides information to Web content developers who wish to satisfy the Success Criteria of "Web Content Accessibility Guidelines 2.0" <bibref ref="WCAG20"/> (currently a W3C Working Draft).   The techniques in this document are specific to Flash content <bibref ref="SILVERLIGHT"/>.  Use of the illustrative techniques provided in this document may make it more likely for Web content to demonstrate conformance to WCAG 2.0 Success Criteria (by passing the relevant tests in the WCAG 2.0 test suite - <emph>to be developed</emph>) than if these illustrative techniques are not used.</p>
         <p>There may be other techniques besides those provided in this document that may be used to demonstrate conformance to WCAG 2.0; in that case, it is encouraged to submit those techniques to the WCAG WG for consideration for inclusion in this document, so that the set of techniques  maintained by the WCAG WG is as comprehensive as possible. Deprecated examples illustrate techniques that the Working Group no longer recommends, but may be applicable in some cases. </p>
         <p>This document is part of a series of documents published by the W3C
Web Accessibility Initiative (WAI) to support WCAG 2.0.</p>
      </abstract>
      <langusage>
         <language id="en-US"/>
      </langusage>
      <revisiondesc>
         <p/>
      </revisiondesc>
   </header>
   <body><!-- techniques -->
      <div1 id="silverlight">
         <head>Silverlight Techniques</head>
         <div2 id="silverlight_notes">
            <head>Silverlight Technology Notes</head>
            <p>Microsoft Silverlight is a development platform for applications.
          To learn more about Silverlight and how Microsoft defines and markets
          the Silverlight technology, see <loc href="http://www.microsoft.com/silverlight/what-is-silverlight/">What
          Is Silverlight? document on microsoft.com</loc>. </p>
            <p>Once an application author produces a Silverlight application, the
          most common way to deploy that application is to present the Silverlight
          content using a browser plug-in that end users have installed on their
          computers. The Silverlight plug-in is instantiated within an HTML page
          as an &lt;object&gt; or &lt;embed&gt; tag.   &lt;object&gt; tag attributes
          reference Silverlight's unique classid, and/or its MIME type, thus
          invoking a plug-in instance within the browser host's HTML content.
          Users request the Silverlight-containing page as a URL, and the surrounding
          HTML plus the Silverlight content is viewed within a browser host such
          as Firefox, Internet Explorer, Google Chrome, or Safari. There are
          other means by which Silverlight-developed content can be deployed
          that are NOT viewed in the plug-in or hosted by HTML; this is discussed
          in the upcoming section "Browser Host Platform Considerations". </p>
            <p>The content that is displayed within the Silverlight content area
          is specified as the "source" parameter, within the Silverlight
          object/embed tag. The "source" parameter value references
          a URI for a package. The package is typically served by the same server
          that served the HTML (and the package itself is typically requested
          through http: or https: protocol). The package always contains an application
          manifest, and a managed code compiled DLL. The package might also contain
          other content, for example media files or image files that the application
          consumes as resources. The compiled DLL typically contains two types
          of information within its compiled structure: CLR runtime code that
          handles dynamic operations of the application such as startup logic,
          business rules, event handlers, and further resources. The resources
          inside the DLL are primarily UI definitions in a markup format/language
          called XAML. </p>
            <p>Silverlight provides a combination of built-in support for accessibility
          and capabilities that authors and authoring tools can take advantage
          of in order to enable support for accessible content. Tools and related
          technologies that are related to this include: </p>
            <ulist>
               <item>
                  <p> Microsoft Visual Studio 2010 (or Microsoft Visual Studio 2008
            if still developing for version 3 of the Silverlight runtime) – Silverlight authors
            can use Express versions if their development needs are fairly basic </p>
               </item>
               <item>
                  <p> Microsoft Expression products, in particular Microsoft Expression
            Blend </p>
               </item>
               <item>
                  <p> Silverlight Tools – a separate package for Visual Studio that
            should be installed for effective Silverlight application development </p>
               </item>
               <item>
                  <p> Developer tools that are specifically for verification of information
            presented to either the UIA or MSAA accessibility frameworks. </p>
               </item>
            </ulist>
            <div3 id="silverlight_notes_frameworks">
               <head> Accessibility Frameworks </head>
               <p>Silverlight support for assistive technologies is based on implementing
          Silverlight for Microsoft UI Automation (often abbreviated as UIA).
          In the UIA accessibility framework, Silverlight is implemented as a
          UI Automation server. This means that Silverlight provides information
          about the application itself and its current content through the framework.
          Any subscriber to the operating system's automation can consume that
          information as a UI Automation client. One such client role is typically
          implemented by assistive technologies, most notably by screen readers.
          By acting as a UI Automation client, an assistive technology can programmatically
          determine many aspects of Silverlight content and content structure.
          In addition, UIA has APIs that can change the content in a predictable
          way that maintains security boundaries between applications. Reading
          information from Silverlight through the UIA accessibility framework
          requires no extra work on the part of a given assistive technology,
          presuming that the assistive technology has already implemented UIA.
          All information that Silverlight reports to UIA comes through the common
          property set, and a fixed set of possible user interactions is programmatically
          accessible through a discoverable set of automation patterns and techniques. </p>
               <p>As an example of how UI Automation might provide information to an
          assistive technology, consider the following scenario: </p>
               <olist>
                  <item>
                     <p> A Silverlight application author produces an application that
            follows all Microsoft-documented best practices for providing accessibility
            information, either by specific programming actions or by relying
            on a known set of Silverlight default behaviors (many of these actions/behaviors
            are also described as Silverlight WCAG techniques). </p>
                  </item>
                  <item>
                     <p> A user views a Web page that contains Silverlight content, using
            a browser host that loads the HTML, and using an operating system
            such as Microsoft Windows (XP, Vista or Windows 7) that supports
            UI Automation. </p>
                  </item>
                  <item>
                     <p> An assistive technology that is already running on the user's
            system loads the UIA representation of all Web content loaded by
            the browser. Part of that representation is an automation element
            that represents the Silverlight plug-in. The plug-in content area
            itself is focusable in the browser host's HTML rendering and representation
            model. </p>
                  </item>
                  <item>
                     <p> The user navigates elements in the Silverlight application area,
            either by using the TAB sequence, or by using navigation techniques
            implemented by a particular assistive technology. </p>
                  </item>
                  <item>
                     <p> By forwarding information that is pertinent to either the navigated-to
            element or the application in general, the accessibility framework
            provides the assistive technology with the information from Silverlight
            application. As a specific example, a screen reader might read the
            name and role of the currently focused control element such as a
            Silverlight <obj>TextBox</obj>. In addition, the assistive
            technology can provide means to enter data or otherwise interact
            with elements of that application, if that element reports to UIA
            that it supports such interaction. </p>
                  </item>
               </olist>
               <p>A good introductory topic on UI Automation is available on <loc href="https://msdn.microsoft.com/en-us/library/ms747327.aspx">MSDN</loc>. </p>
               <p>UI Automation supersedes Microsoft Active Accessibility (MSAA), an
          earlier Microsoft accessibility framework. UI Automation provides built-in
          bridging support for MSAA, such that assistive technologies that are
          implemented as clients for MSAA rather than UIA receive the expected
          interface hooks for IAccessible and can call methods of the MSAA interfaces.
          Also, applications that provide MSAA/ IAccessible are readable to a
          UIA-client assistive technology through similar bridging. </p>
               <p>Whether implemented as clients for UI Automation or for MSAA, support
          for assistive technologies is provided for users viewing content using
          combinations of: </p>
               <ulist>
                  <item>
                     <p> Microsoft Internet Explorer 6 or later, in combination with Microsoft
            Silverlight on Windows. </p>
                  </item>
                  <item>
                     <p> Mozilla Firefox 3 or later, in combination with Microsoft Silverlight
            on Windows. </p>
                  </item>
                  <item>
                     <p> Google Chrome 4 or later, in combination with Microsoft Silverlight
            on Windows </p>
                  </item>
               </ulist>
               <p>Screen reader assistive technology support for either MSAA or UIA
          is provided in several assistive technologies, including but not limited
          to: </p>
               <ulist>
                  <item>
                     <p> JAWS </p>
                  </item>
                  <item>
                     <p> Windows-Eyes </p>
                  </item>
                  <item>
                     <p> NVDA </p>
                  </item>
                  <item>
                     <p> Microsoft Narrator </p>
                  </item>
               </ulist>
               <p>The exact level of support to assistive technologies will partially
          depend on whether that assistive technology is implemented as a UIA
          client or an MSAA client. This can vary depending on specific version
          releases of the assistive technology. In general, the UIA architecture
          is capable of reporting a richer information set to clients than is
          MSAA. This is because UIA has a larger number of properties available,
          and also because UIA has the patterns concept to support class extension
          whereas MSAA does not (class extension is a key concept in Silverlight
          programming). </p>
               <p>Silverlight uses UI Automation support as a general system that addresses
          parts or entireties of many WCAG criteria at a system/platform level,
          rather than requiring each Silverlight author to build the entirety
          of such support as an individually coded feature of a Silverlight application.
          The following is a list of criteria where UI Automation support in
          Silverlight is necessary to apply the Silverlight WCAG techniques,
          and the application must be on a client and platform that also supports
          UIA (or MSAA): </p>
               <ulist>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html">Success
              Criterion 1.3.1 (Info and Relationships)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html">Success
              Criterion 1.3.3 (Sensory Characteristics)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-sequence.html">Success
              Criterion 1.3.2 (Meaningful Sequence)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/consistent-behavior-consistent-functionality.html">Success
              Criterion 3.2.4 (Consistent Functionality)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/ensure-compat-rsv.html">Success
              Criterion 4.1.2 (Name Role Value)</loc> 
                     </p>
                  </item>
               </ulist>
               <p>The following is a list of criteria where UIA Automation support in
          Silverlight is helpful but not necessary: </p>
               <ulist>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/content-structure-separation-programmatic.html">Success
              Criterion 1.1.1 (Non-text Content)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-identified.html">Success
              Criterion 3.3.1 (Error Identification)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-cues.html">Success
              Criterion 3.3.2 (Labels or Instructions)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-suggestions.html">Success
              Criterion 3.3.3 (Error Suggestion)</loc> 
                     </p>
                  </item>
                  <item>
                     <p> 
                        <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/minimize-error-reversible.html">Success
              Criterion 3.3.4 (Error Prevention)</loc> 
                     </p>
                  </item>
               </ulist>
               <div4 id="silverlight_notes_frameworks_nrv">
                  <head> Further notes on Name Role Value </head>
                  <p>
                     <loc href="http://www.w3.org/TR/UNDERSTANDING-WCAG20/ensure-compat-rsv.html">Success
            Criterion 4.1.2 (Name Role Value)</loc> directly influenced the design
            of both the Microsoft UI Automation accessibility framework and its
            MSAA predecessor. Many aspects of providing name, role and value
            are built-in to the Silverlight UIA support, and that information
            can be programmatically determined by assistive technologies that
            are programmed as UI Automation clients. </p>
                  <div5 id="silverlight_notes_frameworks_nrv_name">
                     <head> Name </head>
                     <p>In most cases, the name of the control is used to identify that control
          to users, as well as providing a programmatic identifier. In UI Automation
          programming, any entity that can have a name is represented as an <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.aspx">AutomationElement</loc>,
          and its name is determined by reading the value of the <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.name.aspx">AutomationElementInformation.Name
          property</loc>. There is an intermediate "Current" property,
          so an example usage is something like: </p>
                     <p>
                        <code><![CDATA[string AName = anAutomationElement.Current.Name;  ]]></code>
                     </p>
                     <p>
                        <prop>Name</prop> is the most common UI Automation property
            that is consumed by assistive technologies. Application authors in
            general that rely on UI Automation (and Silverlight application authors
            in particular) typically provide strings for <prop>Name</prop> that
            can inform users of the purpose that the element serves in the application.
            For example, if an application provides a button that can be activated,
            the <prop>Name</prop> reported to UI Automation could best describe
            its purpose by using a <prop>Name</prop> string something like "Submit
            form". While there is some crossover here with the concept of
            Value, what is notable about <prop>Name</prop> is that it is
            controlled only by the application rather than typical means of user
            input that would alter the data of Value. </p>
                     <p>Because UI Automation is also used as a framework for automation testing
          of applications, UI Automation supports a parallel identification property
          named <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.automationid.aspx">AutomationId</loc>. <prop>AutomationID</prop> is
          not relevant to accessibility support scenarios, although in practice <prop>Name</prop> and <prop>AutomationID</prop> sometimes
          use the same string values, or are supported by parallel property-forwarding
          techniques by implementing technologies. The intended design difference
          between <prop>AutomationId</prop> and <prop>Name</prop> is
          the following: </p>
                     <ulist>
                        <item>
                           <p> 
                              <prop>AutomationID</prop> is not intended to be human readable,
            but is intended to be unique </p>
                        </item>
                        <item>
                           <p> 
                              <prop>Name</prop> is intended to be human readable but might
            not be unique </p>
                        </item>
                     </ulist>
                     <p>Silverlight in particular has a property-forwarding technique whereby
          the Silverlight-specific <loc href="https://msdn.microsoft.com/en-us/library/system.windows.frameworkelement.name%28VS.95%29.aspx">Name</loc> or <loc href="https://msdn.microsoft.com/en-us/library/cc189028(VS.95).aspx">x:Name</loc> properties
          are promoted as the initial <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.name.aspx">AutomationElementInformation.Name</loc>.
          This forwarding is implemented within build procedures to provide a
          fallback for testing and initial development of an application's UI
          Automation representation. In many cases a forwarded Name/x:Name does
          not result in a particularly human-comprehensible or user-actionable
          string or phrase. Silverlight application authors should use a test-based
          methodology to examine all possible <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.name.aspx">AutomationElementInformation.Name</loc> values
          exposed by their application, and assure that each such string is specifically
          replaced by a UI-specific <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationproperties.name%28VS.95%29.aspx">AutomationProperties.Name
          value</loc>. </p>
                  </div5>
                  <div5 id="silverlight_notes_frameworks_nrv_role">
                     <head> Role </head>
                     <p>Role in UI Automation can be determined through several techniques. </p>
                     <p>The most straightforward technique for determining a given AutomationElement's
          role is to check the value of <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.controltype.aspx">ControlType</loc>.
          This value provides an enumeration that reports role as several known
          possibilities plus an alternate role of "Custom" if no enumeration-defined
          role is a good descriptor. For example, a Silverlight <obj>Button</obj> control
          describes itself to UI Automation as a ControlType of <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.controltype.button.aspx">Button</loc>,
          and a Silverlight <obj>TreeView</obj> describes itself as <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.peers.automationcontroltype%28VS.95%29.aspx">Tree</loc>. </p>
                     <p>For further information on roles, UI Automation clients can query
          an AutomationElement to see which UI Automation patterns that element
          supports. The patterns describe expectations of the interaction model,
          and the patterns themselves expose the methods that clients should
          call to engage that interaction. For more information, see <loc href="https://msdn.microsoft.com/en-us/library/ms741836.aspx">Get
          Supported UI Automation Control Patterns on MSDN</loc>. </p>
                  </div5>
                  <div5 id="silverlight_notes_frameworks_nrv_value">
                     <head> Value </head>
                     <p>In MSAA, the "Value" concept was addressed by the simple
          property <prop>Value</prop> and had to be represented as a string.
          One of the major refinements of UIA over MSAA is to expand what types
          of data can be expected to exist as a value. For this reason, determining "Value" requires
          a larger understanding of UI Automation and how to access UI Automation
          patterns exposed by each peer, and is not discussed further in this
          document. For more information, see <loc href="https://msdn.microsoft.com/en-us/library/ms741836.aspx">Get
          Supported UI Automation Patterns</loc> and <loc href="https://msdn.microsoft.com/en-us/library/ms746719.aspx">UI
          Automation Control Patterns for Clients</loc>. The most basic concept
          of Value is often represented by the <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.valuepattern.aspx">ValuePattern</loc>,
          but UI Automation clients should be aware of the larger range of patterns
          that can possibly return or provide a value. In general, the UIA Value
          pattern is only relevant for setting the value directly, such as in
          a text box where a user types or otherwise inputs a string or phrase. </p>
                     <p>State is also a related concept to value. UI Automation elements typically
          report states that make sense given their role, and such state is reported
          in the provider implementations. There are also some generalized state
          properties available in any automation element. Examples of these include: <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.haskeyboardfocus.aspx">HasKeyboardFocus</loc>; <loc href="https://msdn.microsoft.com/en-us/library/system.windows.automation.automationelement.automationelementinformation.isoffscreen.aspx">IsOffscreen</loc>. </p>
                  </div5>
               </div4>
               <div4 id="silverlight_notes_frameworks_concepts">
                  <head> Object Tree Concepts and UI Automation Tree Views </head>
                  <p>The object tree is composed of all the programming constructs that
          a Silverlight application author explicitly declares by writing XAML
          UI definitions (which are initially loaded by the Silverlight runtime)
          and by invoking run-time code. The relationships between nodes in XAML
          markup, and the declaration order of peer elements in XAML, create
          identical relationships/orders in the object tree representation. In
          code, order is made explicitly by using structured definitions and
          APIs of various types of collections (list, dictionaries, etc.) that
          are common in .NET Framework programming. For example, to get the first
          child of a StackPanel named myPanel, call myPanel.Childen[0]
          (.NET collections are zero-index based). Parent-child relationships
          are declared by how specific properties are set. For example, to add
          a   "newButton" child element to myPanel as the last child,
          call myPanel.Children.Add(newButton). </p>
                  <p>An object tree representation forms the basis of the Silverlight run-time
          programming model, and enables programmatic access to every programming
          entity or element part of a running Silverlight application. The object
          tree representation is particularly useful for accessibility frameworks,
          and in turn for assistive technologies that use the accessibility framework
          as a client. The relationships and item order in the object tree also
          define the default reading order, as well as the default tab sequence
          for default Silverlight key handling. The Silverlight plug-in code
          that renders Silverlight content into the plug-in display area is literally
          reading the same run-time object tree that is being simultaneously
          reported to the accessibility frameworks or other subsystems of Silverlight
          (for example, printing APIs). </p>
                  <p>Silverlight supports UI Automation (UIA) as its primary accessibility
          framework on Windows platform. Silverlight also provides accessibility
          information to MSAA, by reporting information through the UIA-MSAA
          bridge. By using the APIs of the relevant accessibility framework,
          assistive technologies and other accessibility framework clients can
          discover the information and relationships declared in a Silverlight
          application's runtime object tree. The accessibility framework APIs
          work against the UI automation tree in a manner that does not require
          any specific knowledge of the Silverlight programming model. For example,
          the UI Automation APIs use an abstraction of a <obj>UIAutomationElement</obj> to
          represent any accessible Silverlight object. By calling UI Automation
          APIs against this abstracted object, accessibility framework clients
          can determine any child elements and their count, check parent elements,
          can obtain name/role/value of that <obj>UIAutomationElement</obj>,
          and so on. In fact, Silverlight accessibility support in general is
          achieved without assistive technologies even being aware that Silverlight
          is a distinct technology from HTML. This is because Silverlight implements
          its accessibility framework support such that Silverlight dovetails
          into the surrounding HTML content through the connection point of the "SilverlightControl" <obj>UIAutomationElement</obj> that
          exists within the browser host's HTML content. </p>
                  <p>For more information, see <loc href="https://msdn.microsoft.com/en-us/library/ee684009%28VS.85%29.aspx">UI
            Automation (unmanaged)</loc> or <loc href="https://msdn.microsoft.com/en-us/library/ms753107.aspx">UI
            Automation (managed)</loc> 
                  </p>
                  <div5 id="silverlight_notes_frameworks_concepts_example">
                     <head> An Object Tree / UI Automation Example </head>
                     <p>In the following XAML example, a Silverlight <obj>StackPanel</obj> is
          the container element for four different Button elements. In the visible
          user interface, the resulting buttons are oriented vertically, with
          the first declared button vertically above the others and first in
          the tab sequence. (Event handling logic for each button is not shown
          and is not relevant for the example.) </p>
                     <p>
                        <code><![CDATA[<StackPanel Orientation="Vertical" >
  <Button>Hit</Button>
  <Button>Stay</Button>
  <Button>Split</Button>
  <Button>Double Down</Button>
</StackPanel>
]]></code>
                     </p>
                     <p>The following image shows the resulting render order. Note the first
            “Hit” button has the blue border as focus indicator; focus was placed
            here by traversing the default tab order, and this element was the
            first Silverlight element that captured the focus. </p>
                     <p>
                        <image>
                           <img source="/WAI/WCAG20/Techniques/working-examples/silverlight/stackpanelbuttonsorder.png"
                                height="98"
                                width="277"/>
                           <alt>Image:StackPanelButtonsOrder.png</alt>
                        </image> 
                     </p>
                     <p>The following is the same UI as defined in C# code rather than XAML.
          The key concept here is that each call to a Silverlight collection <function>Add</function> method
          adds that item to the end of the existing collection. Thus, to define
          a collection’s order, add the intended first item with the first
          call to <function>Add</function>, the second item in the next line of code,
          and so on. This code is analogous to what a XAML parser does when it
          processes the previous XAML example, and results in the same visible
          UI and same default tab order. </p>
                     <p>
                        <code><![CDATA[ void MakeUI()
 {
   StackPanel sp = new StackPanel() { Width = 300, Orientation = Orientation.Vertical };
   Button hitButton = new Button() { Content = "Hit" };
   Button stayButton = new Button() { Content = "Stay" };
   Button splitButton = new Button() { Content = "Split" };
   Button doubleDownButton = new Button() { Content = "DoubleDown" };
   sp.Children.Add(hitButton);
   sp.Children.Add(stayButton);
   sp.Children.Add(splitButton);
   sp.Children.Add(doubleDownButton);
 }
]]></code>
                     </p>
                     <p>The following is a screenshot of the UI Automation subtree specifically
            in the area of the UI as declared by either the XAML or C# shown
            previously. The tool being used in this screenshot is Inspect.exe,
            which comes with the Windows SDK version 7.1 </p>
                     <p>
                        <image>
                           <img source="/WAI/WCAG20/Techniques/working-examples/silverlight/screenshot_uia_objecttree.png"
                                height="595"
                                width="737"/>
                           <alt>Image:Screenshot_uia_objecttree.png</alt>
                        </image> 
                     </p>
                     <p>The screenshot is representative of the kind of tree structure that
          a UI Automation client such as a given assistive technology is able
          to program against, when a Silverlight application exists as an embedded
          plug-in inside the surrounding browser host. </p>
                  </div5>
               </div4>
            </div3>
            <div3 id="silverlight_notes_input-multimedia">
               <head> Input and Multimedia </head>
               <p>Silverlight implements UI controls that support keyboard input methods
          for users who do not use a mouse. Also, Silverlight provides the input
          system framework such that application authors and control authors
          can provide similar mouse-keyboard equivalence from their own UI, by
          using the Silverlight event system and sending each event to the same
          or similar handling logic. Silverlight application authors can control
          the tab order of content within Silverlight content, as is demonstrated
          in the WCAG 2.0 techniques for Silverlight. </p>
               <p>Silverlight is often used to display video. Silverlight and the media
          formats it supports can include embedded text tracks with timing markers.
          The text tracks and timing markers enable a Silverlight technique that
          can provide closed captions or subtitles in any language. Silverlight
          and its media formats also support multiple tracks of audio, thereby
          enabling support for video description. </p>
            </div3>
            <div3 id="silverlight_notes_text-color">
               <head> Text and Color Preferences </head>
               <p>Silverlight supports text resize through browser zoom, as described
          in <loc href="http://www.w3.org/TR/WCAG20-TECHS/G142.html">G142:
          Using a technology that has commonly-available user agents that support
          zoom</loc>. The effects of invoking browser zoom apply any resize to
          the entirely of the hosted HTML (including Silverlight content). Silverlight
          interaction with browser zoom is further discussed in the Silverlight
          WCAG technique <specref ref="SL22"/>. </p>
               <p>However, not all browser hosts that are supported by Silverlight provide
          browser zoom as a feature, and in the Firefox implementation the text
          within the Silverlight content area is not affected if the user has
          checked Zoom Text Only. As an alternative or additional technique for
          text resize, the Silverlight WCAG technique <specref ref="SL23"/> describes
          how to use Silverlight APIs to resize text elements that are specifically
          within the Silverlight content area. </p>
               <p>Silverlight supports a high-contrast detection mode at the platform
          level. If the user has already selected a high-contrast mode at the
          platform/OS level, the Silverlight application can use various styling
          and appearance techniques to select a color scheme that is appropriate
          for high contrast. This concept is shown in the Silverlight WCAG technique <specref ref="SL13"/>. Silverlight and its
          API do not account for any color settings that are made for default
          HTML by a browser host application (settings under General / Appearance
          in Internet Explorer; settings under Content / Fonts &amp; Color in
          Firefox). This information is not made available to plug-ins such as
          Silverlight. </p>
            </div3>
            <div3 id="silverlight_ua_support">
               <head> User Agents Supported </head>
               <p>Silverlight documents its official list of supported user agents on
          the Microsoft.com web site. The list is dynamic, because the vendors
          that produce browsers are constantly updating versions. Also, Silverlight
          might announce support for a browser in a time period that falls after
          the release date of the latest Silverlight runtime; sometimes this
          means that the Silverlight product team performed new testing for acceptance
          of that specific user agent and can now vouch for an official level
          of Microsoft support. </p>
               <p>For convenience, a snapshot of the official Microsoft browser/user
          agent support matrix from the date 13 January 2011 is reproduced here: </p>
               <ulist>
                  <item>
                     <p> Windows Vista: IE 8, IE 7, Firefox 3, Chrome 4 </p>
                  </item>
                  <item>
                     <p> Windows 7: IE 8, Firefox 3, Chrome 4 </p>
                  </item>
                  <item>
                     <p> Windows Server 2008: IE 8, IE 7, Firefox 3, Chrome 4 </p>
                  </item>
                  <item>
                     <p> Windows Server 2008 R2: IE 8, Chrome 4 </p>
                  </item>
                  <item>
                     <p> Windows Server 2003, Windows XP SP2, SP3: IE 8, IE 7, IE 6, Firefox
            3, Chrome 4 </p>
                  </item>
                  <item>
                     <p> Windows 2000 SP4 + KB 891861: IE 6 </p>
                  </item>
                  <item>
                     <p> Macintosh OS 10.4.11+ (Intel-based): Firefox 3, Safari 3, Safari
            4 </p>
                  </item>
               </ulist>
               <p>For the official list of supported user agents for Silverlight, see <loc href="http://www.microsoft.com/getsilverlight/get-started/install/default.aspx">http://www.microsoft.com/getsilverlight/get-started/install/default.aspx</loc> (System
          Requirements tab). </p>
               <ulist>
                  <item>
                     <p> As of 13 January 2011 Silverlight does not work in 64-bit browser
            hosts (64-bit platform users should use a 32-bit browser application
            on their system). </p>
                  </item>
                  <item>
                     <p> Silverlight and Novell have a technical collaboration, and Novell
            sponsors an open-source initiative known as the Mono Project. Part
            of the Mono Project is Moonlight, which is a port of Silverlight
            technology for Linux and other Unix/X11 based operating systems.
            For more information, see <loc href="http://www.mono-project.com/Main_Page/">Mono</loc> and <loc href="http://www.mono-project.com/MoonlightSupportedPlatforms/">Moonlight Supported Platforms</loc>. </p>
                  </item>
               </ulist>
            </div3>
            <div3 id="silverlight_notes_platform">
               <head> Browser Host Platform Considerations </head>
               <p>Depending on the browser host being targeted, Silverlight is implemented
          as an ActiveX control or as an NPAPI plugin. When a user installs Silverlight,
          they are installing both of these implementations, such that the same
          Silverlight installation could be accessed by an Internet Explorer
          browser host and a Firefox browser host, and could even be accessed
          simultaneously by both. Differences between the program access layers
          of ActiveX versus NPAPI, and also browser-specific differences in program
          access layers, produce some platform differences that occasionally
          relate to accessibility support. For example, there can be slight differences
          in whether the program access layer will correctly forward certain
          keys or key combinations, which might impact keyboard-mouse equivalence
          implementations. </p>
               <p>Silverlight also supports modes that do not rely on a browser host
          at all. In previous releases of Silverlight, Silverlight was defined
          as a platform for producing rich Internet applications. This is still
          true, but in the current Silverlight release the deployment options
          are expanded such that a Silverlight application is not necessarily
          a web-based application, and Silverlight is not exclusively a Web content
          technology. </p>
               <p>Silverlight supports an out of browser deployment mode. Through UI
          in an initial Web-based Silverlight application, the user is asked
          to conform whether they wish to install the out-browser application.
          If the user approves the installation, the Web-based Silverlight application
          shuts down and the installation begins. Typically, the application
          restarts itself immediately after the installation. Once installed
          on the user's hard disk, a Silverlight out-of-browser functions more
          as an application window under the control of the current platform
          operating system. This is manifested through technical aspects such
          as a change in programming security boundaries, and addition of operating-system-specific
          application model features for the Silverlight out-of-browser application.
          Examples of the latter include icons and presence in running-application
          UI metaphors such as task bars. Out-of-browser mode is not specifically
          mentioned in the Silverlight WCAG techniques, because in this mode
          Silverlight is no longer a Web application. However, an out-of-browser
          Silverlight application can include an embedded control that is itself
          capable of displaying HTML. In this situation, Silverlight accesses
          basic HTML browser frameworks provided by the platform, and any techniques
          that would normally apply to HTML content and Web content could also
          apply to the HTML as viewed within a Silverlight out-of-browser application.
          For more information, see <loc href="https://msdn.microsoft.com/en-us/library/dd550721%28VS.95%29.aspx">MSDN</loc>. </p>
               <p>Silverlight is also a development platform that can be used to create
          applications for Windows Phone. While these applications often rely
          on Internet connectivity, these applications are run in the context
          of an application directly under the Windows Phone operating system,
          rather than being run in an intermediate Web host that serves as a
          generalized Web browser for Windows Phone. Therefore the typical considerations
          of Silverlight acting as a part of a larger definition of Web content
          do not apply. For more information on Silverlight for Windows Phone
          development, see <loc href="https://msdn.microsoft.com/en-us/library/ff402528%28VS.92%29.aspx">The
          Silverlight and XNA Frameworks for Windows Phone on MSDN</loc>. </p>
            </div3>
            <div3 id="silverlight_notes_xaml">
               <head> The XAML Language </head>
               <p>XAML is an abbreviation for eXtensible Application Markup Language.
          In the Silverlight application model, XAML is generally used for defining
          the elements that make up an application's user interface (UI). XAML
          markup for UI resembles markup paradigms for HTML in that it uses angle
          brackets in its syntax, has concepts of elements and attributes, and
          uses a predominately text-based file editing and storage format such
          that XAML is human-readable in a text editor. The UI design role typically
          designs an application user interface by interacting with graphical
          user interface tools such as Microsoft Expression Blend. In this case,
          Expression Blend produces XAML as its output, and XAML becomes the
          interchange format between the Expression Blend tool and the Visual
          Studio tools. Visual Studio is more typically used by code-oriented
          Web developers for Silverlight. Web developers in Visual Studio might
          work with XAML at the text level, and write or change the XAML markup,
          and more than one interchange between tools and/or roles of a given
          XAML file might occur by the time the application is finished. The
          Silverlight techniques are written from the perspective of the code-oriented
          Web developer who is possibly adjusting post-design phase XAML. </p>
               <p>One key difference between HTML and XAML is that XAML is always interpreted
          by the Silverlight runtime, or preparsed at compile time within Silverlight
          tools. XAML is NOT parsed by potentially different engines per browser
          host. Because XAML provides UI definition, the Silverlight techniques
          often include procedures or concepts that adjust the elements and attributes
          of XAML markup for an application. Some of the techniques show procedures
          or concepts for code-behind, scripting, deployment steps, or other
          aspects of Silverlight programming in addition to or instead of XAML
          examples. The runtime parsing characteristics of XAML for Silverlight
          is discussed further in the Silverlight WCAG technique <specref ref="SL33"/>. </p>
               <p>XAML attributes sometimes specify strings that are visible in UI and
          reported to assistive technologies. The Silverlight WCAG techniques
          typically hard-code such UI strings in XAML, so that the example code
          can be kept simple and can concentrate on the immediate concept being
          illustrated. However, hard-coding UI strings in XAML is not a best
          practice for production code, because of localizion considerations.
          To learn more about producing XAML that is localization-ready, or about
          refactoring XAML to support better designer-coder-localizer workflows,
          see <loc href="https://msdn.microsoft.com/en-us/library/cc838238(VS.95).aspx">Localizing
          Silverlight-based Applications</loc> on MSDN. </p>
            </div3>
            <div3 id="silverlight_notes_text-methodology">
               <head> Test-based Methodology for Accessibility Support </head>
               <p>Some of the Silverlight WCAG techniques mention a concept of   "test-based
          methodology" - this section describes what is meant by that concept. </p>
               <p>In typical Web application development, there are phases that are
          a natural part of the workflow. First there is a specification phase,
          where the basic planning is performed. The next two phases are user
          interface design (often interweaved with user experience design) and
          code development. For larger applications or applications that are
          built on frameworks, the human role of designer is often separate from
          the human role of code developer/script developer. For this reason
          the UI design phase and code phase might be going on concurrently,
          and/or might be iterative. At the point where the efforts of UI design
          and code development are combined into a working application, many
          Web developers now introduce a testing phase. It is at this point that
          a test-based methodology for accessibility support becomes an appropriate
          and useful strategy. </p>
               <p>Testers for Web applications sometimes rely largely on ad hoc or experiential
          tests, but increasingly there are tools available that assist with
          the job of testing a Web site. Many of these tools focus on specific
          aspects of testing: sub-areas such as testing under specific browser
          hosts; testing with stored state or data vs. initial experience; testing
          for different form factors; etc. One such sub-area of testing is testing
          the existing accessibility support. </p>
               <p>Because Silverlight supports the UI Automation accessibility framework,
          the best tools for testing accessibility support in a Silverlight application
          are the tools that work with UI Automation as their basis. Some of
          these tools are available from Microsoft, and other such tools are
          available from third parties. </p>
               <p>In a test-based methodology, a tester should view the application
          in its UIA representation. Using tools, testers can write tests for
          certain conditions and determine whether the application as a whole
          passes or fails. For example, a scripted test could determine whether
          all the controls in a UIA view have a valid string for <prop>Name</prop>.
          No <prop>Name</prop> string would potentially cause an assistive
          technology to misrepresent that element, and could cause confusion
          for user groups that rely on a particular assistive technology view
          of an application. In cases where an application failed these kinds
          of tests, the application might be sent back to the human role of developer/script
          writer, so that the missing accessibility information can be committed
          to the application code base. Then the application can be re-tested. </p>
               <p>A test-based methodology for accessibility support works best because
          Silverlight is such an extensive development platform. Sometimes it
          is not immediately obvious to a developer that a certain property required
          for accessibility remained unset. Or perhaps that developer was expecting
          that the human design role would have introduced that information as
          part of UI definition. Only when the integration of UI design and code
          is complete is it possible to see that there is still information or
          functionality missing. When the development process includes a testing
          step wherein dedicated tests for accessibility support are committed
          in a systematic way, it is much more likely that issues can be detected
          prior to application deployment. </p>
            </div3>
            <div3 id="silverlight_notes_test-files">
               <head> Running Silverlight Test Files Provided with Techniques </head>
               <p>Most Silverlight WCAG Techniques reference one or more ZIP files from
          the Test Files section of the technique. These ZIP files are linked
          from the techniques and can be uploaded for testing. </p>
               <p>To run the test files, you must have Microsoft Silverlight (the client
          run-time version) installed on your computer. To install Microsoft
          Silverlight, open the following URL: <loc href="http://www.microsoft.com/getsilverlight/">http://www.microsoft.com/getsilverlight/</loc> .
          Follow the instruction steps on the Web page. When you install Silverlight,
          you are installing the plug-in for use by all supported browser user
          agents on that computer. In order to test techniques that rely on UIA,
          you should install Silverlight on a computer that is running Microsoft
          Windows (XP SP2; Vista; Windows 7) as the operating system. Note that
          you must be running as adminstrator in order to install Microsoft Silverlight
          on the computer. </p>
               <p>Each ZIP file contains two items: an HTML file, and a Silverlight
          package file (always has a file extension of XAP). You can run any
          given test file through the following procedure: </p>
               <olist>
                  <item>
                     <p> Click the link from the technique to download the ZIP file. </p>
                  </item>
                  <item>
                     <p> Extract all files within the ZIP file to a temporary location,
            but use a tangible location such as C:\temp rather than temporary
            Internet files. Do not attempt to open the HTML file from within
            the unextracted archive; the test will only run correctly when the
            test components are extracted from ZIP. </p>
                  </item>
                  <item>
                     <p> Go to the folder location where you extracted the files. To run
            the test based on the current system's file associations for HTML,
            open the HTML with the associated browser. Otherwise, you must open
            the specific browser you want to test under, and type or copy either
            a file:/// URL or a Windows folder path into that browser's address
            bar. </p>
                  </item>
                  <item>
                     <p> This should open the HTML page. When the HTML page opens, it instantiates
            a Silverlight plug-in within the page content, which in turn references
            the other extracted file (the XAP) as local content. </p>
                  </item>
                  <item>
                     <p> Once the content is in view, follow the remaining steps that are
            indicated in the specific test procedure. </p>
                  </item>
               </olist>
            </div3>
            <div3 id="silverlight_notes_sample-code">
               <head> Using Sample Code in Techniques to Create a New Silverlight Application </head>
               <p>The Silverlight techniques offer pre-built test files so that you
          can observe the basic operation of a technique without having to write
          the code yourself, or create your own application. The salient parts
          of Silverlight code or Silverlight XAML for the technique are provided
          as code blocks under the Examples section. In order to experiment more
          with the technique beyond running the test file, you might want to
          define your own Silverlight application project, and then import the
          code and XAML from the technique into your own project. This section
          describes the basic information that is necessary to create a project
          that incorporates sample code from a Silverlight technique. </p>
               <div4 id="silverlight_notes_sample-code_prerequisites">
                  <head> Prerequisites </head>
                  <p>Creating a Silverlight application project requires that you have
          a full Silverlight application development environment installed. Although
          Silverlight applications run cross-platform, the actual development
          of Silverlight applications is done on Microsoft Windows computers.
          The computer must have Microsoft Visual Studio 2008 or Microsoft Visual
          Studio 2010 installed. With some limitations, the Express SKUs of Visual
          Studio are adequate for basic Silverlight application development.
          The Express SKUs are available for 30-day evaluation from the following
          URL: <loc href="http://go.microsoft.com/fwlink/?LinkId=323467">http://go.microsoft.com/fwlink/?LinkId=323467</loc> .
          In addition to Visual Studio, you also should install the Silverlight
          Tools, which includes the Silverlight SDK. Get Silverlight Tools from <loc href="http://go.microsoft.com/fwlink/?LinkID=177428">http://go.microsoft.com/fwlink/?LinkID=177428</loc>.
          What to install for Silverlight development is also linked to and explained
          at <loc href="https://msdn.microsoft.com/en-us/silverlight/bb187358.aspx">Silverlight.net</loc>. </p>
               </div4>
               <div4 id="silverlight_notes_sample-code_project">
                  <head> Creating the Project </head>
                  <p>For general instructions, see <loc href="https://msdn.microsoft.com/en-us/library/cc838164(VS.95).aspx">How
            to: Create a New Silverlight Project</loc>. This creates a new project
            based on a default template. </p>
                  <p>The C# code or XAML shown in the Silverlight techniques is a usually
          a fragment that you should integrate into an existing code file or
          XAML page from the default project template. For code, you generally
          open the file page.xaml.cs from Solution Explorer, and paste the entirety
          of the example code into the body of the C# public partial class that
          you start with (this class comes from a template). For XAML, you generally
          open page.xaml from Solution Explorer and paste the entirety of the
          XAML into the &lt;Grid&gt; element. In some cases the example XAML
          is the entire XAML (you can identify this case if the example XAML
          contains one or more xmlns attributes). In this case, replace the entirety
          of the XAML. However, you may have to adjust the value of the x:Class
          attribute to properly reference your own partial class; this name is
          influenced by your own project naming in your local project and thus
          cannot be anticipated by the example code. Descibing Silverlight application
          development in its entirety is well beyond the scope of this document.
          Use resources available from <loc href="https://msdn.microsoft.com/en-us/silverlight/bb187358.aspx">Silverlight.net</loc> or <loc href="https://msdn.microsoft.com/en-us/library/cc838158(VS.95).aspx">MSDN
          Silverlight documentation</loc> to learn more about Silverlight application
          development. </p>
               </div4>
            </div3>
            <div3 id="silverlight_notes_considerations">
               <head> Special Considerations for WCAG 2.0 Compliance </head>
               <p>2.4.2 Page Titled - In order to meet 2.4.2, Silverlight content must
          be embedded within an HTML page that has a page title in the HTML title
          element. </p>
               <p>3.1.1 Language of Page - The language of an HTML page is established
          by the <att>Lang</att> attribute of the containing object element in HTML. However,
          Silverlight's own logic generally interprets language/culture information
          using a Microsoft .NET Framework concept of the CultureInfo object.
          This makes it important to align the HTML-level lang with any CultureInfo
          as used by Silverlight. The reason for this is that assistive technologies
          are likely to respect the top-level declaration of the <att>Lang</att> attribute
          and to not be aware of the CultureInfo considerations of embedded Silverlight
          content. Application authors can delibrately override language settings
          of a client by specifying a discrete CultureInfo in the Silverlight &lt;object&gt; parameters;
          this can be useful if the application has real-time language switching,
          if users store language preferences either locally or based on server
          information or cookies, etc. Aligning html-lang with CultureInfo and
          adjusting the CultureInfo through various means are both discussed
          in Silverlight techniques. </p>
            </div3>
         </div2>
         <xi:include href="silverlight/SL1.xml"/>
         <xi:include href="silverlight/SL2.xml"/>
         <xi:include href="silverlight/SL3.xml"/>
         <xi:include href="silverlight/SL4.xml"/>
         <xi:include href="silverlight/SL5.xml"/>
         <xi:include href="silverlight/SL6.xml"/>
         <xi:include href="silverlight/SL7.xml"/>
         <xi:include href="silverlight/SL8.xml"/>
         <xi:include href="silverlight/SL9.xml"/>
         <xi:include href="silverlight/SL10.xml"/>
         <xi:include href="silverlight/SL11.xml"/>
         <xi:include href="silverlight/SL12.xml"/>
         <xi:include href="silverlight/SL13.xml"/>
         <xi:include href="silverlight/SL14.xml"/>
         <xi:include href="silverlight/SL15.xml"/>
         <xi:include href="silverlight/SL16.xml"/>
         <xi:include href="silverlight/SL17.xml"/>
         <xi:include href="silverlight/SL18.xml"/>
         <xi:include href="silverlight/SL19.xml"/>
         <xi:include href="silverlight/SL20.xml"/>
         <xi:include href="silverlight/SL21.xml"/>
         <xi:include href="silverlight/SL22.xml"/>
         <xi:include href="silverlight/SL23.xml"/>
         <xi:include href="silverlight/SL24.xml"/>
         <xi:include href="silverlight/SL25.xml"/>
         <xi:include href="silverlight/SL26.xml"/>
         <xi:include href="silverlight/SL27.xml"/>
         <xi:include href="silverlight/SL28.xml"/>
         <xi:include href="silverlight/SL29.xml"/>
         <xi:include href="silverlight/SL30.xml"/>
         <xi:include href="silverlight/SL31.xml"/>
         <xi:include href="silverlight/SL32.xml"/>
         <xi:include href="silverlight/SL33.xml"/>
         <xi:include href="silverlight/SL34.xml"/>
         <xi:include href="silverlight/SL35.xml"/>
         <!--
    	<technique id="SL">
    		<short-name></short-name>
    		<applicability>
    			<p use-id="silverlight.applicability.general"/>
    		</applicability>
    		<applies-to>
    			
    		</applies-to>
    		<ua-issues>
    			<ua-issue use-id="silverlight.ua-issue.general"/>
    		</ua-issues>
    		<description>
    			
    		</description>
    		<examples>
    			<eg-group>
    				<head></head>
    				<description>
    					<p>This example is shown in operation in the <loc href="" linktype="examples">working example of @@</loc>.</p>
    				</description>
    			</eg-group>
    		</examples>
    		<tests>
    			<procedure>
    				
    			</procedure>
    			<expected-results>
    				
    			</expected-results>
    		</tests>
    		<admin>
    			<source><loc href=""/></source>
    		</admin>
    	</technique>
    	-->
      </div1>
   </body>
   <back>
      <div1 id="placeholders"><!-- note: this can be updated using /misc/id-list.xslt (requires cut and paste)-->
         <head/>
         <p id="UNKNOWN">place holder for idref</p>
         <p id="cc1">placeholder for cc1</p>
         <p id="cc2">placeholder for cc2</p>
         <p id="cc3">placeholder for cc3</p>
         <p id="cc4">placeholder for cc4</p>
         <p id="cc5">placeholder for cc5</p>
         <p id="text-equiv">placeholder for text-equiv</p>
         <p id="text-equiv-all">placeholder for text-equiv-all</p>
         <p id="media-equiv">placeholder for media-equiv</p>
         <p id="media-equiv-av-only-alt">placeholder for media-equiv-av-only-alt</p>
         <p id="media-equiv-captions">placeholder for media-equiv-captions</p>
         <p id="media-equiv-audio-desc">placeholder for media-equiv-audio-desc</p>
         <p id="media-equiv-real-time-captions">placeholder for media-equiv-real-time-captions</p>
         <p id="media-equiv-audio-desc-only">placeholder for media-equiv-audio-desc-only</p>
         <p id="media-equiv-sign">placeholder for media-equiv-sign</p>
         <p id="media-equiv-extended-ad">placeholder for media-equiv-extended-ad</p>
         <p id="media-equiv-text-doc">placeholder for media-equiv-text-doc</p>
         <p id="media-equiv-live-audio-only">placeholder for media-equiv-live-audio-only</p>
         <p id="content-structure-separation">placeholder for content-structure-separation</p>
         <p id="content-structure-separation-programmatic">placeholder for content-structure-separation-programmatic</p>
         <p id="content-structure-separation-sequence">placeholder for content-structure-separation-sequence</p>
         <p id="content-structure-separation-understanding">placeholder for content-structure-separation-understanding</p>
         <p id="visual-audio-contrast">placeholder for visual-audio-contrast</p>
         <p id="visual-audio-contrast-without-color">placeholder for visual-audio-contrast-without-color</p>
         <p id="visual-audio-contrast-dis-audio">placeholder for visual-audio-contrast-dis-audio</p>
         <p id="visual-audio-contrast-contrast">placeholder for visual-audio-contrast-contrast</p>
         <p id="visual-audio-contrast-scale">placeholder for visual-audio-contrast-scale</p>
         <p id="visual-audio-contrast-text-presentation">placeholder for visual-audio-contrast-text-presentation</p>
         <p id="visual-audio-contrast7">placeholder for visual-audio-contrast7</p>
         <p id="visual-audio-contrast-noaudio">placeholder for visual-audio-contrast-noaudio</p>
         <p id="visual-audio-contrast-visual-presentation">placeholder for visual-audio-contrast-visual-presentation</p>
         <p id="visual-audio-contrast-text-images">placeholder for visual-audio-contrast-text-images</p>
         <p id="keyboard-operation">placeholder for keyboard-operation</p>
         <p id="keyboard-operation-keyboard-operable">placeholder for keyboard-operation-keyboard-operable</p>
         <p id="keyboard-operation-trapping">placeholder for keyboard-operation-trapping</p>
         <p id="keyboard-operation-all-funcs">placeholder for keyboard-operation-all-funcs</p>
         <p id="time-limits">placeholder for time-limits</p>
         <p id="time-limits-required-behaviors">placeholder for time-limits-required-behaviors</p>
         <p id="time-limits-pause">placeholder for time-limits-pause</p>
         <p id="time-limits-no-exceptions">placeholder for time-limits-no-exceptions</p>
         <p id="time-limits-postponed">placeholder for time-limits-postponed</p>
         <p id="time-limits-server-timeout">placeholder for time-limits-server-timeout</p>
         <p id="seizure">placeholder for seizure</p>
         <p id="seizure-does-not-violate">placeholder for seizure-does-not-violate</p>
         <p id="seizure-three-times">placeholder for seizure-three-times</p>
         <p id="navigation-mechanisms">placeholder for navigation-mechanisms</p>
         <p id="navigation-mechanisms-skip">placeholder for navigation-mechanisms-skip</p>
         <p id="navigation-mechanisms-title">placeholder for navigation-mechanisms-title</p>
         <p id="navigation-mechanisms-focus-order">placeholder for navigation-mechanisms-focus-order</p>
         <p id="navigation-mechanisms-refs">placeholder for navigation-mechanisms-refs</p>
         <p id="navigation-mechanisms-mult-loc">placeholder for navigation-mechanisms-mult-loc</p>
         <p id="navigation-mechanisms-descriptive">placeholder for navigation-mechanisms-descriptive</p>
         <p id="navigation-mechanisms-focus-visible">placeholder for navigation-mechanisms-focus-visible</p>
         <p id="navigation-mechanisms-location">placeholder for navigation-mechanisms-location</p>
         <p id="navigation-mechanisms-link">placeholder for navigation-mechanisms-link</p>
         <p id="navigation-mechanisms-headings">placeholder for navigation-mechanisms-headings</p>
         <p id="meaning">placeholder for meaning</p>
         <p id="meaning-doc-lang-id">placeholder for meaning-doc-lang-id</p>
         <p id="meaning-other-lang-id">placeholder for meaning-other-lang-id</p>
         <p id="meaning-idioms">placeholder for meaning-idioms</p>
         <p id="meaning-located">placeholder for meaning-located</p>
         <p id="meaning-supplements">placeholder for meaning-supplements</p>
         <p id="meaning-pronunciation">placeholder for meaning-pronunciation</p>
         <p id="consistent-behavior">placeholder for consistent-behavior</p>
         <p id="consistent-behavior-receive-focus">placeholder for consistent-behavior-receive-focus</p>
         <p id="consistent-behavior-unpredictable-change">placeholder for consistent-behavior-unpredictable-change</p>
         <p id="consistent-behavior-consistent-locations">placeholder for consistent-behavior-consistent-locations</p>
         <p id="consistent-behavior-consistent-functionality">placeholder for consistent-behavior-consistent-functionality</p>
         <p id="consistent-behavior-no-extreme-changes-context">placeholder for consistent-behavior-no-extreme-changes-context</p>
         <p id="minimize-error">placeholder for minimize-error</p>
         <p id="minimize-error-identified">placeholder for minimize-error-identified</p>
         <p id="minimize-error-cues">placeholder for minimize-error-cues</p>
         <p id="minimize-error-suggestions">placeholder for minimize-error-suggestions</p>
         <p id="minimize-error-reversible">placeholder for minimize-error-reversible</p>
         <p id="minimize-error-context-help">placeholder for minimize-error-context-help</p>
         <p id="minimize-error-reversible-all">placeholder for minimize-error-reversible-all</p>
         <p id="ensure-compat">placeholder for ensure-compat</p>
         <p id="ensure-compat-parses">placeholder for ensure-compat-parses</p>
         <p id="ensure-compat-rsv">placeholder for ensure-compat-rsv</p>
         <p id="G1">placeholder for G1</p>
         <p id="G4">placeholder for G4</p>
         <p id="G5">placeholder for G5</p>
         <p id="G8">placeholder for G8</p>
         <p id="G9">placeholder for G9</p>
         <p id="G10">placeholder for G10</p>
         <p id="G11">placeholder for G11</p>
         <p id="G13">placeholder for G13</p>
         <p id="G14">placeholder for G14</p>
         <p id="G15">placeholder for G15</p>
         <p id="G17">placeholder for G17</p>
         <p id="G18">placeholder for G18</p>
         <p id="G19">placeholder for G19</p>
         <p id="G21">placeholder for G21</p>
         <p id="G53">placeholder for G53</p>
         <p id="G54">placeholder for G54</p>
         <p id="G55">placeholder for G55</p>
         <p id="G56">placeholder for G56</p>
         <p id="G57">placeholder for G57</p>
         <p id="G58">placeholder for G58</p>
         <p id="G59">placeholder for G59</p>
         <p id="G60">placeholder for G60</p>
         <p id="G61">placeholder for G61</p>
         <p id="G62">placeholder for G62</p>
         <p id="G63">placeholder for G63</p>
         <p id="G64">placeholder for G64</p>
         <p id="G65">placeholder for G65</p>
         <p id="G68">placeholder for G68</p>
         <p id="G69">placeholder for G69</p>
         <p id="G70">placeholder for G70</p>
         <p id="G71">placeholder for G71</p>
         <p id="G73">placeholder for G73</p>
         <p id="G74">placeholder for G74</p>
         <p id="G75">placeholder for G75</p>
         <p id="G76">placeholder for G76</p>
         <p id="G78">placeholder for G78</p>
         <p id="G79">placeholder for G79</p>
         <p id="G80">placeholder for G80</p>
         <p id="G81">placeholder for G81</p>
         <p id="G82">placeholder for G82</p>
         <p id="G83">placeholder for G83</p>
         <p id="G84">placeholder for G84</p>
         <p id="G85">placeholder for G85</p>
         <p id="G86">placeholder for G86</p>
         <p id="G87">placeholder for G87</p>
         <p id="G88">placeholder for G88</p>
         <p id="G89">placeholder for G89</p>
         <p id="G90">placeholder for G90</p>
         <p id="G91">placeholder for G91</p>
         <p id="G92">placeholder for G92</p>
         <p id="G93">placeholder for G93</p>
         <p id="G94">placeholder for G94</p>
         <p id="G95">placeholder for G95</p>
         <p id="G96">placeholder for G96</p>
         <p id="G97">placeholder for G97</p>
         <p id="G98">placeholder for G98</p>
         <p id="G99">placeholder for G99</p>
         <p id="G100">placeholder for G100</p>
         <p id="G101">placeholder for G101</p>
         <p id="G102">placeholder for G102</p>
         <p id="G103">placeholder for G103</p>
         <p id="G105">placeholder for G105</p>
         <p id="G107">placeholder for G107</p>
         <p id="G108">placeholder for G108</p>
         <p id="G110">placeholder for G110</p>
         <p id="G111">placeholder for G111</p>
         <p id="G112">placeholder for G112</p>
         <p id="G115">placeholder for G115</p>
         <p id="G117">placeholder for G117</p>
         <p id="G120">placeholder for G120</p>
         <p id="G121">placeholder for G121</p>
         <p id="G122">placeholder for G122</p>
         <p id="G123">placeholder for G123</p>
         <p id="G124">placeholder for G124</p>
         <p id="G125">placeholder for G125</p>
         <p id="G126">placeholder for G126</p>
         <p id="G127">placeholder for G127</p>
         <p id="G128">placeholder for G128</p>
         <p id="G130">placeholder for G130</p>
         <p id="G131">placeholder for G131</p>
         <p id="G133">placeholder for G133</p>
         <p id="G134">placeholder for G134</p>
         <p id="G135">placeholder for G135</p>
         <p id="G136">placeholder for G136</p>
         <p id="G138">placeholder for G138</p>
         <p id="G139">placeholder for G139</p>
         <p id="G140">placeholder for G140</p>
         <p id="G141">placeholder for G141</p>
         <p id="G142">placeholder for G142</p>
         <p id="G143">placeholder for G143</p>
         <p id="G144">placeholder for G144</p>
         <p id="G145">placeholder for G145</p>
         <p id="G146">placeholder for G146</p>
         <p id="G147">placeholder for G147</p>
         <p id="G148">placeholder for G148</p>
         <p id="G149">placeholder for G149</p>
         <p id="G150">placeholder for G150</p>
         <p id="G151">placeholder for G151</p>
         <p id="G152">placeholder for G152</p>
         <p id="G153">placeholder for G153</p>
         <p id="G155">placeholder for G155</p>
         <p id="G156">placeholder for G156</p>
         <p id="G157">placeholder for G157</p>
         <p id="G158">placeholder for G158</p>
         <p id="G159">placeholder for G159</p>
         <p id="G160">placeholder for G160</p>
         <p id="G161">placeholder for G161</p>
         <p id="G162">placeholder for G162</p>
         <p id="G163">placeholder for G163</p>
         <p id="G164">placeholder for G164</p>
         <p id="G165">placeholder for G165</p>
         <p id="G166">placeholder for G166</p>
         <p id="G167">placeholder for G167</p>
         <p id="G168">placeholder for G168</p>
         <p id="G169">placeholder for G169</p>
         <p id="G170">placeholder for G170</p>
         <p id="G171">placeholder for G171</p>
         <p id="G172">placeholder for G172</p>
         <p id="G173">placeholder for G173</p>
         <p id="G174">placeholder for G174</p>
         <p id="G175">placeholder for G175</p>
         <p id="G176">placeholder for G176</p>
         <p id="G177">placeholder for G177</p>
         <p id="G178">placeholder for G178</p>
         <p id="G179">placeholder for G179</p>
         <p id="G180">placeholder for G180</p>
         <p id="G181">placeholder for G181</p>
         <p id="G182">placeholder for G182</p>
         <p id="G183">placeholder for G183</p>
         <p id="G184">placeholder for G184</p>
         <p id="G185">placeholder for G185</p>
         <p id="G186">placeholder for G186</p>
         <p id="G187">placeholder for G187</p>
         <p id="G188">placeholder for G188</p>
         <p id="G189">placeholder for G189</p>
         <p id="G190">placeholder for G190</p>
         <p id="G191">placeholder for G191</p>
         <p id="G192">placeholder for G192</p>
         <p id="G193">placeholder for G193</p>
         <p id="G194">placeholder for G194</p>
         <p id="G195">placeholder for G195</p>
         <p id="G196">placeholder for G196</p>
         <p id="G197">placeholder for G197</p>
         <p id="G198">placeholder for G198</p>
         <p id="G204">placeholder for G204</p>
         <p id="H2">placeholder for H2</p>
         <p id="H4">placeholder for H4</p>
         <p id="H24">placeholder for H24</p>
         <p id="H25">placeholder for H25</p>
         <!-- H27 removed as was duplicate of H53 -->
         <p id="H28">placeholder for H28</p>
         <p id="H30">placeholder for H30</p>
         <p id="H32">placeholder for H32</p>
         <p id="H33">placeholder for H33</p>
         <p id="H34">placeholder for H34</p>
         <p id="H35">placeholder for H35</p>
         <p id="H36">placeholder for H36</p>
         <p id="H37">placeholder for H37</p>
         <p id="H39">placeholder for H39</p>
         <p id="H40">placeholder for H40</p>
         <p id="H42">placeholder for H42</p>
         <p id="H43">placeholder for H43</p>
         <p id="H44">placeholder for H44</p>
         <p id="H45">placeholder for H45</p>
         <p id="H46">placeholder for H46</p>
         <p id="H48">placeholder for H48</p>
         <p id="H49">placeholder for H49</p>
         <p id="H50">placeholder for H50</p>
         <p id="H51">placeholder for H51</p>
         <p id="H53">placeholder for H53</p>
         <p id="H54">placeholder for H54</p>
         <p id="H56">placeholder for H56</p>
         <p id="H57">placeholder for H57</p>
         <p id="H58">placeholder for H58</p>
         <p id="H60">placeholder for H60</p>
         <p id="H62">placeholder for H62</p>
         <p id="H63">placeholder for H63</p>
         <p id="H64">placeholder for H64</p>
         <p id="H65">placeholder for H65</p>
         <p id="H67">placeholder for H67</p>
         <p id="H69">placeholder for H69</p>
         <p id="H70">placeholder for H70</p>
         <p id="H71">placeholder for H71</p>
         <p id="H73">placeholder for H73</p>
         <p id="H74">placeholder for H74</p>
         <p id="H75">placeholder for H75</p>
         <p id="H76">placeholder for H76</p>
         <p id="H77">placeholder for H77</p>
         <p id="H78">placeholder for H78</p>
         <p id="H79">placeholder for H79</p>
         <p id="H80">placeholder for H80</p>
         <p id="H81">placeholder for H81</p>
         <p id="H82">placeholder for H82</p>
         <p id="H83">placeholder for H83</p>
         <p id="H84">placeholder for H84</p>
         <p id="H85">placeholder for H85</p>
         <p id="H86">placeholder for H86</p>
         <!-- H87 is now G204 -->
         <p id="H88">placeholder for H88</p>
         <p id="H89">placeholder for H89</p>
         <p id="H90">placeholder for H90</p>
         <p id="H91">placeholder for H91</p>
         <p id="SCR1">placeholder for SCR1</p>
         <p id="SCR2">placeholder for SCR2</p>
         <p id="SCR14">placeholder for SCR14</p>
         <p id="SCR16">placeholder for SCR16</p>
         <p id="SCR18">placeholder for SCR18</p>
         <p id="SCR19">placeholder for SCR19</p>
         <p id="SCR20">placeholder for SCR20</p>
         <p id="SCR21">placeholder for SCR21</p>
         <p id="SCR22">placeholder for SCR22</p>
         <p id="SCR24">placeholder for SCR24</p>
         <p id="SCR26">placeholder for SCR26</p>
         <p id="SCR27">placeholder for SCR27</p>
         <p id="SCR28">placeholder for SCR28</p>
         <p id="SCR29">placeholder for SCR29</p>
         <p id="SCR30">placeholder for SCR30</p>
         <p id="SCR31">placeholder for SCR31</p>
         <p id="SCR32">placeholder for SCR32</p>
         <p id="SCR33">placeholder for SCR33</p>
         <p id="SCR34">placeholder for SCR34</p>
         <p id="SCR35">placeholder for SCR35</p>
         <p id="SCR36">placeholder for SCR36</p>
         <p id="SCR37">placeholder for SCR37</p>
         <p id="SCR38">placeholder for SCR37</p>
         <p id="SVR1">placeholder for SVR1</p>
         <p id="SVR2">placeholder for SVR2</p>
         <p id="SVR3">placeholder for SVR3</p>
         <p id="SVR4">placeholder for SVR4</p>
         <p id="SM1">placeholder for SM1</p>
         <p id="SM2">placeholder for SM2</p>
         <p id="SM6">placeholder for SM6</p>
         <p id="SM7">placeholder for SM7</p>
         <p id="SM11">placeholder for SM11</p>
         <p id="SM12">placeholder for SM12</p>
         <p id="SM13">placeholder for SM13</p>
         <p id="SM14">placeholder for SM14</p>
         <p id="T1">placeholder for T1</p>
         <p id="T2">placeholder for T2</p>
         <p id="T3">placeholder for T3</p>
         <p id="ARIA1">placeholder for ARIA1</p>
         <p id="ARIA2">placeholder for ARIA2</p>
         <p id="ARIA3">placeholder for ARIA3</p>
         <p id="ARIA4">placeholder for ARIA4</p>
         <p id="F1">placeholder for F1</p>
         <p id="F2">placeholder for F2</p>
         <p id="F3">placeholder for F3</p>
         <p id="F4">placeholder for F4</p>
         <p id="F7">placeholder for F7</p>
         <p id="F8">placeholder for F8</p>
         <p id="F9">placeholder for F9</p>
         <p id="F10">placeholder for F10</p>
         <p id="F12">placeholder for F12</p>
         <p id="F13">placeholder for F13</p>
         <p id="F14">placeholder for F14</p>
         <p id="F15">placeholder for F15</p>
         <p id="F16">placeholder for F16</p>
         <!-- <p id="F17">placeholder for F17</p> (removed 2014 12 16) -->
         <p id="F19">placeholder for F19</p>
         <p id="F20">placeholder for F20</p>
         <p id="F22">placeholder for F22</p>
         <p id="F23">placeholder for F23</p>
         <p id="F24">placeholder for F24</p>
         <p id="F25">placeholder for F25</p>
         <p id="F26">placeholder for F26</p>
         <p id="F30">placeholder for F30</p>
         <p id="F31">placeholder for F31</p>
         <p id="F32">placeholder for F32</p>
         <p id="F33">placeholder for F33</p>
         <p id="F34">placeholder for F34</p>
         <p id="F36">placeholder for F36</p>
         <p id="F37">placeholder for F37</p>
         <p id="F38">placeholder for F38</p>
         <p id="F39">placeholder for F39</p>
         <p id="F40">placeholder for F40</p>
         <p id="F41">placeholder for F41</p>
         <p id="F42">placeholder for F42</p>
         <p id="F43">placeholder for F43</p>
         <p id="F44">placeholder for F44</p>
         <p id="F46">placeholder for F46</p>
         <p id="F47">placeholder for F47</p>
         <p id="F48">placeholder for F48</p>
         <p id="F49">placeholder for F49</p>
         <p id="F50">placeholder for F50</p>
         <p id="F52">placeholder for F52</p>
         <p id="F54">placeholder for F54</p>
         <p id="F55">placeholder for F55</p>
         <p id="F58">placeholder for F58</p>
         <p id="F59">placeholder for F59</p>
         <p id="F60">placeholder for F60</p>
         <p id="F61">placeholder for F61</p>
         <!-- <p id="F62">placeholder for F62</p> (removed 2014 12 16) -->
         <p id="F63">placeholder for F63</p>
         <p id="F65">placeholder for F65</p>
         <p id="F66">placeholder for F66</p>
         <p id="F67">placeholder for F67</p>
         <p id="F68">placeholder for F68</p>
         <p id="F69">placeholder for F69</p>
         <p id="F70">placeholder for F70</p>
         <p id="F71">placeholder for F71</p>
         <p id="F72">placeholder for F72</p>
         <p id="F73">placeholder for F73</p>
         <p id="F74">placeholder for F74</p>
         <p id="F75">placeholder for F75</p>
         <!-- <p id="F76">placeholder for F76</p> -->
         <p id="F77">placeholder for F77</p>
         <p id="F78">placeholder for F78</p>
         <p id="F79">placeholder for F79</p>
         <p id="F80">placeholder for F80</p>
         <p id="F81">placeholder for F81</p>
         <p id="F82">placeholder for F82</p>
         <p id="F83">placeholder for F83</p>
         <p id="F84">placeholder for F84</p>
         <p id="F85">placeholder for F85</p>
         <p id="F86">placeholder for F86</p>
         <p id="F87">placeholder for F87</p>
         <p id="F88">placeholder for F88</p>
         <p id="F89">placeholder for F89</p>
         <p id="C22">placeholder for C22</p>
         <p id="C29">placeholder for C29</p>
      </div1>
      <div1 id="references">
         <head>References</head>
         <blist>
            <bibl id="CSS1" key="CSS1">"Cascading Style Sheets, level 1," B. Bos, H. Wium Lie, eds., W3C Recommendation 17 Dec 1996, revised 11 Jan 1999. Available at <loc href="http://www.w3.org/TR/REC-CSS1/">http://www.w3.org/TR/REC-CSS1/</loc>.</bibl>
            <bibl id="CSS2" key="CSS2">"Cascading Style Sheets, level 2," B. Bos, H. Wium Lie, C. Lilley, and I. Jacobs, eds., W3C Recommendation 12 May 1998. Available at <loc href="http://www.w3.org/TR/CSS2/">http://www.w3.org/TR/CSS2/</loc>.</bibl>
            <bibl id="CSS21" key="CSS21">"Cascading Style Sheets, level 2 revision 1,"  B. Bos, T. Çelik,  I. Hickson,   H. Wium Lie, eds., W3C Candidate Recommendation 25 February 2004.  Available at:  <loc href="http://www.w3.org/TR/CSS21/">http://www.w3.org/TR/CSS21/</loc>
            </bibl>
            <bibl id="CSS3" key="CSS3">
               <titleref href="http://www.w3.org/Style/CSS/current-work#table">[CSS 2.1 and CSS 3] Roadmap</titleref>, CSS WG's table of modules and publication dates.</bibl>
            <bibl id="PDF" key="PDF">"PDF", Adobe Systems. Available at <loc href="http://www.adobe.com/devnet/pdf.html">http://www.adobe.com/devnet/pdf.html</loc>.</bibl>
            <bibl id="SILVERLIGHT"
                  key="SILVERLIGHT">"Silverlight", Microsoft. Available at <loc href="http://www.silverlight.net/">http://www.silverlight.net/</loc>
            </bibl>
            <bibl id="HTML4" key="HTML4">"HTML 4.01 Specification," D. Raggett, A. Le Hors, I. Jacobs, eds.,  W3C Recommendation 24 December 1999. Available at <loc href="http://www.w3.org/TR/html401/">http://www.w3.org/TR/html401/</loc>
            </bibl>
            <bibl id="WCAG20" key="WCAG20">"Web Content Accessibility Guidelines 2.0,"  B. Caldwell, M. Cooper, L. Guarino Reid, and G. Vanderheiden, eds., W3C Working Draft 11 December 2007. This W3C Working Draft is available at <loc href="http://www.w3.org/TR/2007/WD-WCAG20-20071211/">http://www.w3.org/TR/2007/WD-WCAG20-20071211/</loc>.  The latest version of WCAG 2.0 is available at <loc href="http://www.w3.org/TR/WCAG20/">http://www.w3.org/TR/WCAG20/</loc>
            </bibl>
            <bibl id="XHTML1" key="XHTML1">"XHTML 1.0 The Extensible HyperText Markup Language (Second Edition)," S. Pemberton, et al.,  W3C Recommendation 26 January 2000, revised 1 August 2002. Available at:  <loc href="http://www.w3.org/TR/xhtml1/">http://www.w3.org/TR/xhtml1/</loc>.</bibl>
         </blist>
      </div1>
   </back>
</spec>